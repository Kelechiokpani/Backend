import express from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import http from "http";
import { isDev, MONGO_URL, PORT, } from "./helpers/config.js";
// import {config} from "dotenv";
import db from "./db/index.js";
import routes from './routes/index.js';
import dotenv from 'dotenv';
dotenv.config();
// config()
// const app = express();
// Initialize Express app
const app = express();
// Middleware setup
app.use(express.json());
app.use(bodyParser.json({ limit: '5mb' }));
app.use(cookieParser());
// Setup MongoDB connection
new db(console).connect(MONGO_URL);
// CORS configuration
const origin = [
    "https://sdash.mynncapp.com",
    "https://sdash-staging.mynncapp.com",
];
if (isDev) {
    origin.push("http://localhost:3000", "http://localhost:3001");
}
const corsOptions = {
    origin,
    credentials: true,
    methods: ["GET", "POST", "DELETE", "PUT"],
    allowedHeaders: [
        "Content-Type",
        "Authorization",
        "Cache-Control",
        "Expires",
        "Pragma",
    ],
};
app.use(cors(corsOptions));
// Define routes
app.use('/api', routes);
// Basic route for health check
app.get('/', (req, res) => {
    res.send('Server health check!');
});
const httpServer = http.createServer(app);
await new Promise((resolve) => httpServer.listen({ port: PORT }, resolve));
console.log(`ðŸš€ Server ready at http://localhost:${PORT}`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQXNFLE1BQU0sU0FBUyxDQUFDO0FBQzdGLE9BQU8sVUFBVSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLFlBQVksTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQW1CLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxHQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUUsaUNBQWlDO0FBQ2pDLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvQixPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQztBQUN2QyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFHNUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBV2hCLFdBQVc7QUFDWCx5QkFBeUI7QUFFekIseUJBQXlCO0FBQ3pCLE1BQU0sR0FBRyxHQUFnQixPQUFPLEVBQUUsQ0FBQztBQUVuQyxtQkFBbUI7QUFDbkIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUd4QiwyQkFBMkI7QUFDM0IsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQW1CLENBQUMsQ0FBQztBQUc3QyxxQkFBcUI7QUFDckIsTUFBTSxNQUFNLEdBQUc7SUFDWCw0QkFBNEI7SUFDNUIsb0NBQW9DO0NBQ3ZDLENBQUM7QUFFRixJQUFJLEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFFRCxNQUFNLFdBQVcsR0FBRztJQUNoQixNQUFNO0lBQ04sV0FBVyxFQUFFLElBQUk7SUFDakIsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDO0lBQ3pDLGNBQWMsRUFBRTtRQUNaLGNBQWM7UUFDZCxlQUFlO1FBQ2YsZUFBZTtRQUNmLFNBQVM7UUFDVCxRQUFRO0tBQ1g7Q0FDSixDQUFDO0FBRUYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQW1CLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFHN0MsZ0JBQWdCO0FBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXhCLCtCQUErQjtBQUMvQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDLENBQUM7QUFHSCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRzFDLE1BQU0sSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNoQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUM3QyxDQUFDO0FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsSUFBSSxFQUFFLENBQUMsQ0FBQyJ9